package fr.xebia.image

import fr.xebia.image.ImagingTools._
import org.scalatest.{FunSpec, Matchers}

class ScalaTestExampleSpec extends FunSpec with Matchers {

  describe("a segmentation monad") {

    it("should replace '#' by '@'") {
      // given an image
      val rawImage = TestImageBuilder.fromString(
        """
          |......###........
          |...###...##......
          |..##.......##....
          |..#..........#...
          |..#..........#...
          |..#.........##...
          |..###......###...
          |...###...###.....
          |.....####........
          |.................
        """.stripMargin)

      // when
      val segmentedImg = ImageProcessingMonad[String](rawImage).threshold(
        cell => cell == "#",
        replaceBy = "@"
      )

      // then
      segmentedImg.rawImage shouldBe TestImageBuilder.fromString(
        """
          |......@@@........
          |...@@@...@@......
          |..@@.......@@....
          |..@..........@...
          |..@..........@...
          |..@.........@@...
          |..@@@......@@@...
          |...@@@...@@@.....
          |.....@@@@........
          |.................
        """.stripMargin
      )
    }

    it("should propagate a front") {
      val specialChar = "@"
      // given
      val rawImage = TestImageBuilder.fromString(
        """
          |......###........
          |...###...##......
          |..##.......##....
          |..############...
          |..#..........#...
          |..#.........##...
          |..############...
          |...###...###.....
          |.....####........
          |.................
        """.stripMargin)
      val seed = Position(0, 7)

      // when
      val monad = ImageProcessingMonad[String](rawImage)

      val segmentedPositions = monad.propagateFront(
        neighbors = monad.rawImage.neighborsAndSelf(seed),
        searchedValue = "#",
        frontMark = specialChar
      )
      val segmentedImage = monad.rawImage.replace(segmentedPositions, specialChar)

      // then
      segmentedImage shouldBe TestImageBuilder.fromString(
        """
          |......@@@........
          |...@@@...@@......
          |..@@.......@@....
          |..@@@@@@@@@@@@...
          |..@..........@...
          |..@.........@@...
          |..@@@@@@@@@@@@...
          |...@@@...@@@.....
          |.....@@@@........
          |.................
        """.stripMargin
      )
    }

  }

}

object ImagingTools {

  object TestImageBuilder {

    def fromString(rawContent: String): RawImage[String] = {
      lazy val contents = rawContent
        .split("\n")
        .map(_.toCharArray.toList.map(_.toString))
        .toList
        .filter(_.nonEmpty)
      RawImage(contents)
    }

  }

  def anImageMonad(content: String): ImageProcessingMonad[String] =
    ImageProcessingMonad(TestImageBuilder.fromString(content))

}
